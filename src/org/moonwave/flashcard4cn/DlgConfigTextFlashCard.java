/*
 * ============================================================================
 * GNU Lesser General Public License
 * ============================================================================
 *
 * flashcard4cn - FlashCard for Chinese Characters
 * Copyright (C) Jonathan Luo
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.
 *
 */
package org.moonwave.flashcard4cn;

import java.awt.Font;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.apache.commons.lang.StringUtils;
import org.jdesktop.application.Action;
import org.moonwave.util.DialogUtil;

/**
 * DlgConfigFlashCard.java
 *
 * Created on March 18, 2009, 11:31 AM
 *
 * @author Jonathan Luo
 */
public class DlgConfigTextFlashCard extends javax.swing.JDialog {

    TextFlashCardEntity flashCardEntity;

    /** Creates new form DlgOptions */
    public DlgConfigTextFlashCard(java.awt.Frame parent, boolean modal, TextFlashCardEntity flashCardEntity) {
        super(parent, modal);
        this.flashCardEntity = flashCardEntity;
        initComponents();
        postInit();
    }

    private void postInit() {
        initFont();
        initFontSize();
        txtDisplay.setWrapStyleWord(true);
        cbFlashCard.setModel(new javax.swing.DefaultComboBoxModel(flashCardEntity.getFlashCardNames().toArray()));
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        flashCardEntity.setCurrentFlashCardName(flashCardName);
        flashCardEntity.copyFlashCardValue(flashCardName);
        txtDisplay.setFont(new Font(AppState.getDefaultFontName(), Font.PLAIN, 24));
        txtDisplay.setWrapStyleWord(true);
        txtDisplay.setText(flashCardEntity.getFlashCardValue(flashCardName));
        setTotalCount();
        btnSave.setEnabled(false);
        btnCancel.setEnabled(false);
    }

    private void initFont() {
        List<String> fontNames = flashCardEntity.getFontNames();
        for (String fontName : fontNames) {
            cbFont.addItem(fontName);
        }
    }

    private void initFontSize() {
        cbFontSize.addItem("16");
        cbFontSize.addItem("18");
        cbFontSize.addItem("20");
        cbFontSize.addItem("22");
        cbFontSize.addItem("24");
        cbFontSize.addItem("26");
        cbFontSize.addItem("28");
        cbFontSize.addItem("32");
        cbFontSize.addItem("36");
        cbFontSize.addItem("40");
        cbFontSize.addItem("44");
        cbFontSize.addItem("48");
        cbFontSize.addItem("54");
        cbFontSize.addItem("60");
        cbFontSize.addItem("66");
        cbFontSize.addItem("72");
        cbFontSize.addItem("80");
        cbFontSize.addItem("88");
        cbFontSize.addItem("96");
        cbFontSize.setSelectedItem("24");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbFlashCard = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbFont = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbFontSize = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        lblTotalCount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.moonwave.flashcard4cn.FlashCardApp.class).getContext().getResourceMap(DlgConfigTextFlashCard.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);

        cbFlashCard.setToolTipText(resourceMap.getString("cbFlashCard.toolTipText")); // NOI18N
        cbFlashCard.setName("cbFlashCard"); // NOI18N
        cbFlashCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFlashCardActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        txtDisplay.setColumns(20);
        txtDisplay.setLineWrap(true);
        txtDisplay.setRows(5);
        txtDisplay.setName("txtDisplay"); // NOI18N
        txtDisplay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDisplayFocusGained(evt);
            }
        });
        txtDisplay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDisplayKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDisplayKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtDisplay);

        jPanel1.setName("jPanel1"); // NOI18N

        btnClose.setText(resourceMap.getString("btnClose.text")); // NOI18N
        btnClose.setToolTipText(resourceMap.getString("btnClose.toolTipText")); // NOI18N
        btnClose.setName("btnClose"); // NOI18N
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnNew.setMnemonic('N');
        btnNew.setText(resourceMap.getString("btnNew.text")); // NOI18N
        btnNew.setToolTipText(resourceMap.getString("btnNew.toolTipText")); // NOI18N
        btnNew.setName("btnNew"); // NOI18N
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setMnemonic('D');
        btnDelete.setText(resourceMap.getString("btnDelete.text")); // NOI18N
        btnDelete.setToolTipText(resourceMap.getString("btnDelete.toolTipText")); // NOI18N
        btnDelete.setName("btnDelete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setMnemonic('S');
        btnSave.setText(resourceMap.getString("btnSave.text")); // NOI18N
        btnSave.setName("btnSave"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setMnemonic('a');
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnClose, btnDelete, btnNew, btnSave});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnNew)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(43, 43, 43)
                .addComponent(btnClose)
                .addContainerGap(129, Short.MAX_VALUE))
        );

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        cbFont.setName("cbFont"); // NOI18N
        cbFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFontActionPerformed(evt);
            }
        });

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        cbFontSize.setName("cbFontSize"); // NOI18N
        cbFontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFontSizeActionPerformed(evt);
            }
        });

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        lblTotalCount.setText(resourceMap.getString("lblTotalCount.text")); // NOI18N
        lblTotalCount.setName("lblTotalCount"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFont, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotalCount, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbFlashCard, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFlashCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cbFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(lblTotalCount))))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName(resourceMap.getString("Form.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbFlashCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFlashCardActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        String flashCardName = (String) cb.getSelectedItem();
        String currentFlashCardName = flashCardEntity.getCurrentFlashCardName();
        if (flashCardEntity.hasChanged(currentFlashCardName)) {
            int iRet = DialogUtil.showYesNoConfirm(this, "Switch to New Flash Card Confirmation", "Data has changed, are you sure you want to swicth to a new flashcard and discard the changes?");
            if (iRet == JOptionPane.YES_OPTION) {
                flashCardEntity.restoreFlashCardValue(currentFlashCardName);
                switchToNewFlashCard(flashCardName);
            } else {
                cb.setSelectedItem(currentFlashCardName);
            }
        } else {
            switchToNewFlashCard(flashCardName);
        }
    }//GEN-LAST:event_cbFlashCardActionPerformed

    private void switchToNewFlashCard(String flashCardName) {
        flashCardEntity.copyFlashCardValue(flashCardName);
        flashCardEntity.setCurrentFlashCardName(flashCardName);

        this.txtDisplay.setText(flashCardEntity.getFlashCardValue(flashCardName));
        this.setTotalCount();
        updateButtonStates();
    }

    private void cbFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFontActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        String fontName = (String) cb.getSelectedItem();

        String fontSize = (String) this.cbFontSize.getSelectedItem();
        int size = 10;
        if (fontSize != null) {
            size = Integer.valueOf(fontSize);
        }
        Font cnFont = new Font(fontName, Font.BOLD, size);

        this.txtDisplay.setFont(cnFont);
}//GEN-LAST:event_cbFontActionPerformed

    private void cbFontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFontSizeActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        String fontSize = (String) cb.getSelectedItem();
        int size = 10;
        if (fontSize != null) {
            size = Integer.valueOf(fontSize);
        }
        String fontName = (String) this.cbFont.getSelectedItem();
        Font cnFont = new Font(fontName, Font.BOLD, size);
        this.txtDisplay.setFont(cnFont);
}//GEN-LAST:event_cbFontSizeActionPerformed

    private void txtDisplayKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDisplayKeyTyped
        setTotalCount();
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        flashCardEntity.getFlashCardMap().put(flashCardName, txtDisplay.getText());
        if (flashCardEntity.hasChanged(flashCardName)) {
            btnSave.setEnabled(true);
            btnCancel.setEnabled(true);
        } else {
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
        }
}//GEN-LAST:event_txtDisplayKeyTyped

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int iRet = DialogUtil.showYesNoConfirm(this, "Deletion Confirmation", "Are you sure you want to delete selected FlashCard?");
        if (iRet == JOptionPane.YES_OPTION) {
            String flashCardName = (String) cbFlashCard.getSelectedItem();
            flashCardEntity.deleteFlashCard(flashCardName);
            if (flashCardEntity.save()) {
                btnSave.setEnabled(false);
                btnCancel.setEnabled(false);
                cbFlashCard.removeItem(flashCardName);
                if (cbFlashCard.getModel().getSize() > 0) {
                    cbFlashCard.setSelectedIndex(0);
                    flashCardName = (String) cbFlashCard.getSelectedItem();
                    flashCardEntity.setCurrentFlashCardName(flashCardName);
                    flashCardEntity.copyFlashCardValue(flashCardName);
                }
            } else {
                DialogUtil.showError(this, "Save Error", "An error occurred when saving data");
            }
            this.updateButtonStates();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        DlgNewFlashCardName dlg = new DlgNewFlashCardName(this, "Create a new FlashCard", flashCardEntity);
        dlg.setVisible(true);
        if (dlg.getResultObject() != null) {
            String newFlashCardName = (String) dlg.getResultObject(); // get a valid new flash card name
            flashCardEntity.setCurrentFlashCardName(newFlashCardName);
            flashCardEntity.setFlashCardValue(newFlashCardName, ""); // add new flashcard to flashCardMap, must before the next line
            flashCardEntity.copyFlashCardValue(newFlashCardName);

            flashCardEntity.createAndSortFlashCardNames();
            cbFlashCard.setModel(new javax.swing.DefaultComboBoxModel(flashCardEntity.getFlashCardNames().toArray()));
            cbFlashCard.getModel().setSelectedItem(newFlashCardName);
        }
        dlg.dispose();
        updateButtonStates();
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        if (flashCardEntity.save()) {
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
            flashCardEntity.copyFlashCardValue(flashCardName);
        } else {
            DialogUtil.showError(this, "Save Error", "An error occurred when saving data");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        boolean bPerformCancel = false;
        // if there are a lot of changes, like the size difference more than 20
        // ask if user really want to cancel the changes
        if (flashCardEntity.hasBigChanged(flashCardName)) {
            int iRet = DialogUtil.showYesNoConfirm(this, "Cancel Confirmation", "Are you sure you want to cancel your changes?");
            if (iRet == JOptionPane.YES_OPTION)
                bPerformCancel = true;
        } else
            bPerformCancel = true; // for small changes, cancel occur right away
        if (bPerformCancel) {
            flashCardEntity.restoreFlashCardValue(flashCardName);
            String origValue = flashCardEntity.getFlashCardValue(flashCardName);
            this.txtDisplay.setText(origValue);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtDisplayFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDisplayFocusGained
        setTotalCount();
    }//GEN-LAST:event_txtDisplayFocusGained

    private void txtDisplayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDisplayKeyReleased
        setTotalCount();
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        this.flashCardEntity.getFlashCardMap().put(flashCardName, this.txtDisplay.getText().trim());
        updateButtonStates();
    }//GEN-LAST:event_txtDisplayKeyReleased

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        if (flashCardEntity.hasChanged(flashCardName)) {
            int iRet = DialogUtil.showYesNoConfirm(this, "Close Confirmation", "Data has changed, are you sure you want to close this dialog and discard any changes?");
            if (iRet == JOptionPane.YES_OPTION) {
                closeDlg();
            }
        } else {
            closeDlg();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void updateButtonStates() {
        String flashCardName = (String) cbFlashCard.getSelectedItem();
        if (flashCardEntity.hasChanged(flashCardName)) {
            btnSave.setEnabled(true);
            btnCancel.setEnabled(true);
        } else {
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
        }
    }

    private void setTotalCount() {
        String text = txtDisplay.getText().trim();
        String[] tokens = StringUtils.split(text, ", ， "); // \uFF0C; //OK for both english and Chinese ","s and " "s
        this.lblTotalCount.setText((tokens.length > 0) ? String.valueOf(tokens.length) : "0");
    }

    @Action
    public void closeDlg() {
        this.setVisible(false);
        this.dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cbFlashCard;
    private javax.swing.JComboBox cbFont;
    private javax.swing.JComboBox cbFontSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalCount;
    private javax.swing.JTextArea txtDisplay;
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                DlgConfigTextFlashCard dialog = new DlgConfigTextFlashCard(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
}
